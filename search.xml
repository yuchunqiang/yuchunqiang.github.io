<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring依赖注入（DI）的三种方式</title>
      <link href="/yuchunqiang.oschina.io/2020/01/08/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%88DI%EF%BC%89%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/yuchunqiang.oschina.io/2020/01/08/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%88DI%EF%BC%89%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring依赖注入（DI）的三种方式"><a href="#Spring依赖注入（DI）的三种方式" class="headerlink" title="Spring依赖注入（DI）的三种方式"></a>Spring依赖注入（DI）的三种方式</h1><h3 id="Spring依赖注入（DI）的三种方式，分别为："><a href="#Spring依赖注入（DI）的三种方式，分别为：" class="headerlink" title="Spring依赖注入（DI）的三种方式，分别为："></a>Spring依赖注入（DI）的三种方式，分别为：</h3><h5 id="1．-接口注入"><a href="#1．-接口注入" class="headerlink" title="1．  接口注入"></a>1．  接口注入</h5><h5 id="2．-Setter方法注入"><a href="#2．-Setter方法注入" class="headerlink" title="2．  Setter方法注入"></a>2．  Setter方法注入</h5><h5 id="3．-构造方法注入"><a href="#3．-构造方法注入" class="headerlink" title="3．  构造方法注入"></a>3．  构造方法注入</h5><h3 id="下面介绍一下这三种依赖注入在Spring中是怎么样实现的。"><a href="#下面介绍一下这三种依赖注入在Spring中是怎么样实现的。" class="headerlink" title="下面介绍一下这三种依赖注入在Spring中是怎么样实现的。"></a>下面介绍一下这三种依赖注入在Spring中是怎么样实现的。</h3><h4 id="首先我们需要以下几个类："><a href="#首先我们需要以下几个类：" class="headerlink" title="首先我们需要以下几个类："></a>首先我们需要以下几个类：</h4><h6 id="接口-Logic-java"><a href="#接口-Logic-java" class="headerlink" title="接口 Logic.java"></a>接口 Logic.java</h6><h6 id="接口实现类-LogicImpl-java"><a href="#接口实现类-LogicImpl-java" class="headerlink" title="接口实现类 LogicImpl.java"></a>接口实现类 LogicImpl.java</h6><h6 id="一个处理类-LoginAction-java"><a href="#一个处理类-LoginAction-java" class="headerlink" title="一个处理类 LoginAction.java"></a>一个处理类 LoginAction.java</h6><h6 id="还有一个测试类-TestMain-java"><a href="#还有一个测试类-TestMain-java" class="headerlink" title="还有一个测试类 TestMain.java"></a>还有一个测试类 TestMain.java</h6><h5 id="Logic-java如下："><a href="#Logic-java如下：" class="headerlink" title="Logic.java如下："></a>Logic.java如下：</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>test<span class="token punctuation">.</span>di; <span class="token keyword">public</span>  <span class="token keyword">interface</span>  <span class="token class-name">Logic</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span>  String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ;<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="LogicImpl-java如下："><a href="#LogicImpl-java如下：" class="headerlink" title="LogicImpl.java如下："></a>LogicImpl.java如下：</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>test<span class="token punctuation">.</span>di; <span class="token keyword">public</span>  <span class="token keyword">class</span>  <span class="token class-name">LogicImpl</span> <span class="token keyword">implements</span>  <span class="token class-name">Logic</span><span class="token punctuation">{</span>    <span class="token keyword">public</span>  String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span>  <span class="token string">"养九的博客"</span> ;    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="TestMain-java如下："><a href="#TestMain-java如下：" class="headerlink" title="TestMain.java如下："></a>TestMain.java如下：</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>test<span class="token punctuation">.</span>di;<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext;<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>FileSystemXmlApplicationContext;<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 得到ApplicationContext 对象        ApplicationContext ctx = new FileSystemXmlApplicationContext(</span>              <span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span> ;       <span class="token comment" spellcheck="true">// 得到Bean        LoginAction loginAction = (LoginAction) ctx.getBean("loginAction");</span>       loginAction<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ;       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="LoginAction-java-会根据使用不同的注入方法而稍有不同"><a href="#LoginAction-java-会根据使用不同的注入方法而稍有不同" class="headerlink" title="LoginAction.java 会根据使用不同的注入方法而稍有不同"></a>LoginAction.java 会根据使用不同的注入方法而稍有不同</h5><p>下面按照注入的方法来看LoginAction.java类</p><h4 id="Setter方法注入："><a href="#Setter方法注入：" class="headerlink" title="Setter方法注入："></a>Setter方法注入：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>test<span class="token punctuation">.</span>di; <span class="token keyword">public</span>  <span class="token keyword">class</span>  <span class="token class-name">LoginAction</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  Logic logic ;    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       String name <span class="token operator">=</span> logic<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ;       System<span class="token punctuation">.</span>out <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"个人博客： "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> ;      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @return  the logic     */</span>    <span class="token keyword">public</span>  Logic <span class="token function">getLogic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span>  logic ;    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param  logic     *            the logic to set     */</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">setLogic</span><span class="token punctuation">(</span>Logic logic<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span> <span class="token punctuation">.</span>logic <span class="token operator">=</span> logic ;    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="定义了一个Logic-类型的变量-logic-在LoginAction并没有对logic-进行实例化，"><a href="#定义了一个Logic-类型的变量-logic-在LoginAction并没有对logic-进行实例化，" class="headerlink" title="定义了一个Logic 类型的变量 logic, 在LoginAction并没有对logic 进行实例化，"></a>定义了一个Logic 类型的变量 logic, 在LoginAction并没有对logic 进行实例化，</h6><h6 id="而只有他对应的-setter-getter方法，因为我们这里使用的是Spring的依赖注入的方式"><a href="#而只有他对应的-setter-getter方法，因为我们这里使用的是Spring的依赖注入的方式" class="headerlink" title="而只有他对应的 setter/getter方法，因为我们这里使用的是Spring的依赖注入的方式"></a>而只有他对应的 setter/getter方法，因为我们这里使用的是Spring的依赖注入的方式</h6><h5 id="applicationContext-xml配置文件如下"><a href="#applicationContext-xml配置文件如下" class="headerlink" title="applicationContext.xml配置文件如下:"></a>applicationContext.xml配置文件如下:</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logic<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.test.di.LogicImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginAction<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.test.di.LoginAction<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logic<span class="token punctuation">"</span></span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logic<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="现在可以运行testMain-java了，我们可以看到控制台打出了-个人博客：-养九的博客"><a href="#现在可以运行testMain-java了，我们可以看到控制台打出了-个人博客：-养九的博客" class="headerlink" title="现在可以运行testMain.java了，我们可以看到控制台打出了 个人博客： 养九的博客"></a>现在可以运行testMain.java了，我们可以看到控制台打出了 个人博客： 养九的博客</h6><h6 id="这就是spring的s-etter方法注入"><a href="#这就是spring的s-etter方法注入" class="headerlink" title="这就是spring的s etter方法注入"></a>这就是spring的s etter方法注入</h6><h4 id="构造方法注入："><a href="#构造方法注入：" class="headerlink" title="构造方法注入："></a>构造方法注入：</h4><h6 id="依靠LoginAction的构造方法来达到D-I的目的"><a href="#依靠LoginAction的构造方法来达到D-I的目的" class="headerlink" title="依靠LoginAction的构造方法来达到D I的目的"></a>依靠LoginAction的构造方法来达到D I的目的</h6><h5 id="LoginAction-java："><a href="#LoginAction-java：" class="headerlink" title="LoginAction.java："></a>LoginAction.java：</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>test<span class="token punctuation">.</span>di;<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginAction</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Logic logic;    <span class="token keyword">public</span> <span class="token function">LoginAction</span><span class="token punctuation">(</span>Logic logic<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>logic <span class="token operator">=</span> logic;    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String name <span class="token operator">=</span> logic<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ;       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"个人博客："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>;    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="这里我们添加了一个LoginAction的构造方法"><a href="#这里我们添加了一个LoginAction的构造方法" class="headerlink" title="这里我们添加了一个LoginAction的构造方法"></a>这里我们添加了一个LoginAction的构造方法</h6><h5 id="applicationContext-xml配置文件如下-1"><a href="#applicationContext-xml配置文件如下-1" class="headerlink" title="applicationContext.xml配置文件如下:"></a>applicationContext.xml配置文件如下:</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logic<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.test.di.LogicImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginAction<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.test.di.LoginAction<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logic<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>我们使用constructor-arg来进行配置, index属性是用来表示构造方法中参数的顺序的，如果有多个参数，则按照顺序，从 0,1…来配置我们现在可以运行testMain.java了,结果跟使用Setter方法注入完全一样.其中需要注意一点有：构造函数有多个参数的话，如：参数1 ，参数2 ，而参数2 依赖于参数1 ，这 中情况则要注意构造函数的顺序，必须将参数1 放在参数2 之前，按照顺序。</strong></p><h4 id="接口注入："><a href="#接口注入：" class="headerlink" title="接口注入："></a>接口注入：</h4><h5 id="LogicAction-java："><a href="#LogicAction-java：" class="headerlink" title="LogicAction.java："></a>LogicAction.java：</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>test<span class="token punctuation">.</span>di; <span class="token keyword">public</span>  <span class="token keyword">class</span>  <span class="token class-name">LoginAction</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  Logic logic ;    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">try</span>  <span class="token punctuation">{</span>           Object obj <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span> <span class="token punctuation">(</span><span class="token string">"com.spring.test.di.LogicImpl"</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ;           logic <span class="token operator">=</span> <span class="token punctuation">(</span>Logic<span class="token punctuation">)</span> obj;           String name <span class="token operator">=</span> logic<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ;           System<span class="token punctuation">.</span>out <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"个人博客： "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> ;       <span class="token punctuation">}</span> <span class="token keyword">catch</span>  <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ;       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="applicationContext-xml配置文件如下-2"><a href="#applicationContext-xml配置文件如下-2" class="headerlink" title="applicationContext.xml配置文件如下:"></a>applicationContext.xml配置文件如下:</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logic<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.test.di.LogicImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginAction<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.test.di.LoginAction<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其实我们最常用的还是Setter和构造函数这两种注入方法<br><strong>对于Spring的依赖注入，最重要的就是理解他的，一旦理解了，将会觉得非常的简单。无非就是让 容器来给我们实例化那些类，我们要做的就是给容器提供这个接口，这个接口就我们的set方法或者构造函数了。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring DI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js全选复选框和反选按钮</title>
      <link href="/yuchunqiang.oschina.io/2020/01/07/js%E5%85%A8%E9%80%89%E5%8F%8D%E9%80%89%E6%8C%89%E9%92%AE/"/>
      <url>/yuchunqiang.oschina.io/2020/01/07/js%E5%85%A8%E9%80%89%E5%8F%8D%E9%80%89%E6%8C%89%E9%92%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="js全选复选框和反选按钮"><a href="#js全选复选框和反选按钮" class="headerlink" title="js全选复选框和反选按钮"></a>js全选复选框和反选按钮</h1><h4 id="js的写法在标题行增加全选复选框和反选按钮在数据行增加带name属性的复选框。"><a href="#js的写法在标题行增加全选复选框和反选按钮在数据行增加带name属性的复选框。" class="headerlink" title="js的写法在标题行增加全选复选框和反选按钮在数据行增加带name属性的复选框。"></a>js的写法在标题行增加全选复选框和反选按钮在数据行增加带name属性的复选框。</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkall<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkall()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>反选<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inverseChk()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>主键序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>。。。。。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${page.list }<span class="token punctuation">"</span></span><span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>recruit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkid<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${recruit.nid }<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span> ${recruit.nid }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>${recruit.cjob }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>。。。。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-全选和全不选-两种实现方式："><a href="#2-全选和全不选-两种实现方式：" class="headerlink" title="2.全选和全不选 两种实现方式："></a>2.全选和全不选 两种实现方式：</h4><h5 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//全选和全不选(prop())(jq 的循环方式)</span><span class="token keyword">function</span> <span class="token function">checkAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//获取数据行的所有复选框</span><span class="token keyword">var</span> bankchk<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"[name='checkid']"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> banks<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkall"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//jq的each循环，</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>bankchk<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span>banks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">checkall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span>"<span class="token punctuation">[</span>name<span class="token operator">=</span><span class="token string">'checkid'</span><span class="token punctuation">]</span><span class="token string">").prop("</span>checked<span class="token string">",$("</span>#checkall<span class="token string">").prop("</span>checked"<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-反选"><a href="#3-反选" class="headerlink" title="3.反选"></a>3.反选</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">inverseChk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> checkids<span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>"<span class="token punctuation">[</span>name<span class="token operator">=</span><span class="token string">'checkid'</span><span class="token punctuation">]</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>checkids<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux上redis安装</title>
      <link href="/yuchunqiang.oschina.io/2020/01/06/Linux%E4%B8%8Aredis%E5%AE%89%E8%A3%85/"/>
      <url>/yuchunqiang.oschina.io/2020/01/06/Linux%E4%B8%8Aredis%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="redis4安装"><a href="#redis4安装" class="headerlink" title="#redis4安装"></a>#redis4安装</h2><h4 id="1-第一步官网下载"><a href="#1-第一步官网下载" class="headerlink" title="1.第一步官网下载"></a>1.第一步官网下载</h4><p><a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></p><p>rz 上传或者直接</p><pre class="line-numbers language-powershell"><code class="language-powershell">wget   http:<span class="token operator">/</span><span class="token operator">/</span>download<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>io<span class="token operator">/</span>releases<span class="token operator">/</span>redis<span class="token operator">-</span>4<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、将其下载到我的-server-tools-目录下"><a href="#2、将其下载到我的-server-tools-目录下" class="headerlink" title="2、将其下载到我的/server/tools/目录下"></a>2、将其下载到我的/server/tools/目录下</h4><h4 id="3、解压并进入其目录"><a href="#3、解压并进入其目录" class="headerlink" title="3、解压并进入其目录"></a>3、解压并进入其目录</h4><p>　　</p><pre class="line-numbers language-powershell"><code class="language-powershell">tar xf redis<span class="token operator">-</span>4<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、编译源程序"><a href="#4、编译源程序" class="headerlink" title="4、编译源程序"></a>4、编译源程序</h4><p>　　</p><pre class="line-numbers language-powershell"><code class="language-powershell">make cd srcmake install PREFIX=<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5、将配置文件移动到redis目录"><a href="#5、将配置文件移动到redis目录" class="headerlink" title="5、将配置文件移动到redis目录"></a>5、将配置文件移动到redis目录</h4><p>　　</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">mv</span> <span class="token operator">/</span>server<span class="token operator">/</span>tools<span class="token operator">/</span>redis<span class="token operator">-</span>4<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf  <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">/</span>etc<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6、启动redis服务"><a href="#6、启动redis服务" class="headerlink" title="6、启动redis服务"></a>6、启动redis服务</h4><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">/</span>bin<span class="token operator">/</span>redis<span class="token operator">-</span>server  <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7、默认情况，Redis不是在后台运行，我们需要把redis放在后台运行"><a href="#7、默认情况，Redis不是在后台运行，我们需要把redis放在后台运行" class="headerlink" title="7、默认情况，Redis不是在后台运行，我们需要把redis放在后台运行　"></a>7、默认情况，Redis不是在后台运行，我们需要把redis放在后台运行　</h4><pre class="line-numbers language-powershell"><code class="language-powershell">vim <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将daemonize的值改为yes<br> 将bind 本机ip或127.0.0.1</p><h4 id="8、客户端连接"><a href="#8、客户端连接" class="headerlink" title="8、客户端连接"></a>8、客户端连接</h4><p>名字</p><p>link IP地址</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">/</span>bin<span class="token operator">/</span>redis<span class="token operator">-</span><span class="token function">cli</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[root@m01 bin]# /usr/local/redis/bin/redis-server  /usr/local/redis/etc/redis.conf 9014:C 07 Nov 22:45:49.763 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo 9014:C 07 Nov 22:45:49.763 # Redis version=4.0.2, bits=64, commit=00000000, modified=0, pid=9014, just started 9014:C 07 Nov 22:45:49.764 # Configuration loaded [root@m01 bin]# /usr/local/redis/bin/redis-cli 127.0.0.1:6379&gt; set test “laotansauncai” OK 127.0.0.1:6379&gt; get test “laotansauncai” 127.0.0.1:6379&gt;</p><h4 id="9、停止redis实例"><a href="#9、停止redis实例" class="headerlink" title="9、停止redis实例"></a>9、停止redis实例</h4><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">/</span>bin<span class="token operator">/</span>redis<span class="token operator">-</span><span class="token function">cli</span> shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-powershell"><code class="language-powershell">pkill redis<span class="token operator">-</span>server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="10、让redis开机自启"><a href="#10、让redis开机自启" class="headerlink" title="10、让redis开机自启"></a>10、让redis开机自启</h4><p>　</p><p>　vim /etc/rc.local</p><p>　　加入</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">/</span>bin<span class="token operator">/</span>redis<span class="token operator">-</span>server <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">-</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="11、接下来我们看看-usr-local-redis-bin目录下的几个文件时什么"><a href="#11、接下来我们看看-usr-local-redis-bin目录下的几个文件时什么" class="headerlink" title="11、接下来我们看看/usr/local/redis/bin目录下的几个文件时什么"></a>11、接下来我们看看/usr/local/redis/bin目录下的几个文件时什么</h4><p>　　redis-benchmark：redis性能测试工具</p><p>　　redis-check-aof：检查aof日志的工具</p><p>　　redis-check-dump：检查rdb日志的工具</p><p>　　redis-cli：连接用的客户端</p><p>　　redis-server：redis服务进程</p><p>Redis的配置</p><p>　　daemonize：如需要在后台运行，把该项的值改为yes</p><p>　　pdifile：把pid文件放在/var/run/redis.pid，可以配置到其他地址</p><p>　　bind：指定redis只接收来自该IP的请求，如果不设置，那么将处理所有请求，在生产环节中最好设置该项</p><p>　　port：监听端口，默认为6379</p><p>　　timeout：设置客户端连接时的超时时间，单位为秒</p><p>　　loglevel：等级分为4级，debug，revbose，notice和warning。生产环境下一般开启notice</p><p>　　logfile：配置log文件地址，默认使用标准输出，即打印在命令行终端的端口上</p><p>　　database：设置数据库的个数，默认使用的数据库是0</p><p>　　save：设置redis进行数据库镜像的频率</p><p>　　rdbcompression：在进行镜像备份时，是否进行压缩</p><p>　　dbfilename：镜像备份文件的文件名</p><p>　　dir：数据库镜像备份的文件放置的路径</p><p>　　slaveof：设置该数据库为其他数据库的从数据库</p><p>　　masterauth：当主数据库连接需要密码验证时，在这里设定</p><p>　　requirepass：设置客户端连接后进行任何其他指定前需要使用的密码</p><p>　　maxclients：限制同时连接的客户端数量</p><p>　　maxmemory：设置redis能够使用的最大内存</p><p>　　appendonly：开启appendonly模式后，redis会把每一次所接收到的写操作都追加到appendonly.aof文件中，当redis重新启动时，会从该文件恢复出之前的状态</p><p>　　appendfsync：设置appendonly.aof文件进行同步的频率</p><p>　　vm_enabled：是否开启虚拟内存支持</p><p>　　vm_swap_file：设置虚拟内存的交换文件的路径</p><p>　　vm_max_momery：设置开启虚拟内存后，redis将使用的最大物理内存的大小，默认为0</p><p>　　vm_page_size：设置虚拟内存页的大小</p><p>　　vm_pages：设置交换文件的总的page数量</p><p>　　vm_max_thrrads：设置vm IO同时使用的线程数量</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 缓存 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成电脑的SSH key</title>
      <link href="/yuchunqiang.oschina.io/2020/01/04/ssh/"/>
      <url>/yuchunqiang.oschina.io/2020/01/04/ssh/</url>
      
        <content type="html"><![CDATA[<h1 id="电脑SSH公钥"><a href="#电脑SSH公钥" class="headerlink" title="电脑SSH公钥"></a>电脑SSH公钥</h1><p>打开git命令窗口（git  Bash Here）</p><p>输入：（</p><p>ssh-keygen -t rsa -C “邮箱”<br>）</p><p>生成电脑的.ssh文件</p><p>默认在C:\Users\Administrator.ssh</p><p>之前在阿里云上需要SSH公钥，然后用到的</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SSH key </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH key </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gnomeshgh文案✨</title>
      <link href="/yuchunqiang.oschina.io/2020/01/04/Gnomeshgh%E6%96%87%E6%A1%88%E2%9C%A8/"/>
      <url>/yuchunqiang.oschina.io/2020/01/04/Gnomeshgh%E6%96%87%E6%A1%88%E2%9C%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Gnomeshgh文案✨"><a href="#Gnomeshgh文案✨" class="headerlink" title="Gnomeshgh文案✨"></a>Gnomeshgh文案✨</h1><p>*<em>Gnomeshgh✨妙语连珠是猎物，支支吾吾是喜欢。<br>*</em> 我的第一个人网站：<a href="http://www.wenan.cloud" target="_blank" rel="noopener" title="Gnomeshgh文案✨">Gnomeshgh文案✨</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Gnomeshgh文案✨ </category>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gnomeshgh文案✨ </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

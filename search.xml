<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>判断当前时间为星期几</title>
      <link href="/2020/04/14/%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E4%B8%BA%E6%98%9F%E6%9C%9F%E5%87%A0/"/>
      <url>/2020/04/14/%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E4%B8%BA%E6%98%9F%E6%9C%9F%E5%87%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="判断当前时间为星期几"><a href="#判断当前时间为星期几" class="headerlink" title="判断当前时间为星期几"></a>判断当前时间为星期几</h1><pre class="line-numbers language-java"><code class="language-java"> Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> data<span class="token operator">=</span>cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">==</span>Calendar<span class="token punctuation">.</span>MONDAY<span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">==</span>Calendar<span class="token punctuation">.</span>TUESDAY<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">==</span>Calendar<span class="token punctuation">.</span>WEDNESDAY<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">==</span>Calendar<span class="token punctuation">.</span>THURSDAY<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">==</span>Calendar<span class="token punctuation">.</span>FRIDAY<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">==</span>Calendar<span class="token punctuation">.</span>SATURDAY<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">==</span>Calendar<span class="token punctuation">.</span>SUNDAY<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http请求协议</title>
      <link href="/2020/03/18/http%E8%AF%B7%E6%B1%82%E5%8D%8F%E8%AE%AE/"/>
      <url>/2020/03/18/http%E8%AF%B7%E6%B1%82%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="http请求协议"><a href="#http请求协议" class="headerlink" title="http请求协议"></a>http请求协议</h1><p>http它是一个超文本传输协议，它属于osi七层模型的应用层，有请求和响应构成，是一个标准的客户端服务器模型。http是无状态的也就是说同一个客户端的这次请求和上次请求是没有对应关系。</p><h3 id="http它的工作流程主要分为七部分"><a href="#http它的工作流程主要分为七部分" class="headerlink" title="http它的工作流程主要分为七部分"></a>http它的工作流程主要分为七部分</h3><p><strong>1. 首先是通过tcp建立与服务器的连接；</strong><br><strong>2. 然后发送请求（包括要访问的url地址，请求的方式get/post）；</strong><br><strong>3. 发送头信息（包括要传递的参数）；</strong><br><strong>4. 务器接收到请求后首先会进行响应；</strong><br><strong>5. 然后返回头信息；</strong><br><strong>6. 返回主体内容；</strong><br><strong>7. 客户端接收到请求后断开连接；</strong></p><h3 id="我们还要了解tcp的三次握手与四次挥手"><a href="#我们还要了解tcp的三次握手与四次挥手" class="headerlink" title="我们还要了解tcp的三次握手与四次挥手"></a>我们还要了解tcp的三次握手与四次挥手</h3><h4 id="建立连接时的三次握手："><a href="#建立连接时的三次握手：" class="headerlink" title="建立连接时的三次握手："></a>建立连接时的三次握手：</h4><p><strong>1.第一次握手：一开始A客户和B服务端都是关闭——然后由A客户向B服务端发送请求（报文）</strong></p><p><strong>2.第二次握手：然后B接收到请求后，如果同意建立连接就向A发送确认请求</strong></p><p><strong>3.第三次握手：然后A接收到确认请求后建立连接</strong></p><h4 id="简单点就是"><a href="#简单点就是" class="headerlink" title="-简单点就是"></a>-简单点就是</h4><p><strong>1.首先由客户端告诉服务器我是谁</strong></p><p><strong>2.然后服务器接收到后告诉客户端我是谁</strong></p><p><strong>3.然后客户端接收到后建立连接</strong></p><h4 id="断开连接时的四次挥手："><a href="#断开连接时的四次挥手：" class="headerlink" title="断开连接时的四次挥手："></a>断开连接时的四次挥手：</h4><p><strong>1.第一次挥手：由A停止发送请求，并告诉B服务端</strong></p><p><strong>2.第二次挥手：B服务端接收到请求后，就向A客户端告知</strong></p><p><strong>3.第三次挥手：B服务器发送请求给A，等待A确认断开连接</strong></p><p><strong>4.第四次挥手：A收到B的请求后，发出确认报文后，等待计算器设置的时间后，断开连接</strong></p><h5 id="简单的就是"><a href="#简单的就是" class="headerlink" title="-简单的就是"></a>-简单的就是</h5><p><strong>1.首先由客户端告诉服务器说我没有要发送的请求啦</strong><br><strong>2.然后服务器接收到后告诉客户端说我知道啦</strong><br><strong>3.然后告诉客户端说我没有要返回的数据啦</strong><br><strong>4.然后客户端接收到请求后会断开连接</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事物的特性和隔离级别</title>
      <link href="/2020/03/17/%E4%BA%8B%E7%89%A9%E7%9A%84%E7%89%B9%E6%80%A7%E5%92%8C%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
      <url>/2020/03/17/%E4%BA%8B%E7%89%A9%E7%9A%84%E7%89%B9%E6%80%A7%E5%92%8C%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="事物的特性和隔离级别"><a href="#事物的特性和隔离级别" class="headerlink" title="事物的特性和隔离级别"></a>事物的特性和隔离级别</h1><p>本篇讲诉数据库中事务的<strong>四大特性（ACID）</strong>，并且将会详细地说明事务的隔离级别。</p><p>如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性：</p><h3 id="⑴-原子性（Atomicity）"><a href="#⑴-原子性（Atomicity）" class="headerlink" title="⑴ 原子性（Atomicity）"></a>⑴ 原子性（Atomicity）</h3><p>原子性是指事务包含的所有操作<strong>要么全部成功</strong>，要么<strong>全部失败回滚</strong>，因此事务的操作如果成功就必须要完全应用到</p><p>数据库，如果操作失败则不能对数据库有任何影响。</p><h3 id="⑵-一致性（Consistency）"><a href="#⑵-一致性（Consistency）" class="headerlink" title="⑵ 一致性（Consistency）"></a>⑵ 一致性（Consistency）</h3><p>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p><p>拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该</p><p>还得是5000，这就是事务的一致性。</p><h3 id="⑶-隔离性（Isolation）"><a href="#⑶-隔离性（Isolation）" class="headerlink" title="⑶ 隔离性（Isolation）"></a>⑶ 隔离性（Isolation）</h3><p>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，</p><p>不能被其他事务的操作所干扰，*<em>多个并发事务之间要相互隔离 *</em>。</p><p>即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样</p><p>每个事务都感觉不到有其他事务在并发地执行。</p><p>关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。</p><h3 id="⑷-持久性（Durability）"><a href="#⑷-持久性（Durability）" class="headerlink" title="⑷ 持久性（Durability）"></a>⑷ 持久性（Durability）</h3><p>持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务</p><p>的操作。</p><h4 id="1-脏读"><a href="#1-脏读" class="headerlink" title="1,脏读"></a>1,脏读</h4><p><strong>脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。</strong></p><p>当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，</p><p>这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用</p><p>户A向用户B转账100元，对应SQL命令如下</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span>money<span class="token operator">+</span><span class="token number">100</span> <span class="token keyword">where</span> name<span class="token operator">=</span>’B’<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(此时A通知B)</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span>money <span class="token operator">-</span> <span class="token number">100</span> <span class="token keyword">where</span> name<span class="token operator">=</span>’A’<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当只执行第一条SQL时，A通知B查看账户，B发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，</p><p>则所有操作都将回滚，那么当B以后再次查看账户时就会发现钱其实并没有转。</p><h4 id="2，不可重复读"><a href="#2，不可重复读" class="headerlink" title="2，不可重复读"></a>2，不可重复读</h4><p><strong>不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并<br>提交了。</strong></p><p>例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发生了不可</p><p>重复读。</p><p>不可重复读和脏读的区别是，<strong>脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。</strong></p><p>在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，</p><p>例如对于同一个数据A和B依次查询就可能不同，这样就有可能到账A与B发生不必要的冲突。</p><h4 id="3，虚读-幻读"><a href="#3，虚读-幻读" class="headerlink" title="3，虚读(幻读)"></a>3，虚读(幻读)</h4><p>幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表</p><p>中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没</p><p>有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。</p><p><strong>幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同）</strong>，所不同的是不可重复读查询的都是同一个数据项，而幻读针对</p><p>的是一批数据整体（比如数据的个数）。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> sql </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis集群搭建</title>
      <link href="/2020/01/18/redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/01/18/redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="redis集群搭建"><a href="#redis集群搭建" class="headerlink" title="redis集群搭建"></a>redis集群搭建</h1><h2 id="redis集群服务器至少需要六台"><a href="#redis集群服务器至少需要六台" class="headerlink" title="redis集群服务器至少需要六台"></a>redis集群服务器至少需要六台</h2><p><strong>三主三从</strong></p><h4 id="ruby环境"><a href="#ruby环境" class="headerlink" title="ruby环境"></a>ruby环境</h4><p>redis集群管理工具redis-trib.rb依赖ruby环境，首先需要安装ruby环境：<br>安装ruby</p><pre class="line-numbers language-shell"><code class="language-shell">yum install ruby<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">yum install rubygems<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装ruby和redis的接口程序</p><pre class="line-numbers language-shell"><code class="language-shell">gem install redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行这行命令可能会报错解决方法：</p><p>提示:</p><p>gem install redis ERROR: Error installing redis: redis requires Ruby version &gt;= 2.2.2.</p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><h5 id="1-更新执行命令："><a href="#1-更新执行命令：" class="headerlink" title="1.更新执行命令："></a>1.更新执行命令：</h5><pre class="line-numbers language-shell"><code class="language-shell">yum -y update nss<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-安装curl"><a href="#2-安装curl" class="headerlink" title="2.安装curl"></a>2.安装curl</h5><pre class="line-numbers language-shell"><code class="language-shell">yum install curl -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-执行"><a href="#3-执行" class="headerlink" title="3.执行"></a>3.执行</h5><pre class="line-numbers language-shell"><code class="language-shell">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-执行"><a href="#4-执行" class="headerlink" title="4.执行"></a>4.执行</h5><pre class="line-numbers language-shell"><code class="language-shell">curl -L get.rvm.io | bash -s stable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h5><pre class="line-numbers language-shell"><code class="language-shell">find / -name rvm -print<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h5><pre class="line-numbers language-shell"><code class="language-shell">source /usr/local/rvm/scripts/rvm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h5><pre class="line-numbers language-shell"><code class="language-shell">rvm list known<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h5><pre class="line-numbers language-shell"><code class="language-shell">rvm install 2.4.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h5><pre class="line-numbers language-shell"><code class="language-shell">rvm use 2.4.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h5><pre class="line-numbers language-shell"><code class="language-shell">rvm use 2.4.4 --default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h5><pre class="line-numbers language-shell"><code class="language-shell">ruby --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="12"><a href="#12" class="headerlink" title="12."></a>12.</h5><pre class="line-numbers language-shell"><code class="language-shell">gem install redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="集群结点规划"><a href="#集群结点规划" class="headerlink" title="集群结点规划"></a>集群结点规划</h4><p>这里在<strong>同一台服务器用不同的端口表示不同的redis服务器</strong>，如下：</p><p>主节点：192.168.106.132:7001 192.168.106.132:7002 192.168.106.132:7003</p><p>从节点：192.168.106.132:7004 192.168.106.132:7005 192.168.106.132:7006</p><p><strong>（需要修改为自己的服务器ip或127.0.0.1）</strong></p><p>在/usr/local下创建redis-cluster目录，<strong>其下创建7001、7002。。7006目录</strong>；</p><p><strong>redis安装目录bin下的文件拷贝到每个700X目录内</strong>，<strong>同时将redis源码目录src下的redis-trib.rb拷贝到redis-cluster目录下</strong>。</p><h5 id="修改每个700X目录下的redis-conf配置文件："><a href="#修改每个700X目录下的redis-conf配置文件：" class="headerlink" title="修改每个700X目录下的redis.conf配置文件："></a>修改每个700X目录下的redis.conf配置文件：</h5><pre class="line-numbers language-shell"><code class="language-shell">port XXXX cluster-enabled yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>port后数字为为端口号，大概位于45行</strong></p><p><strong>cluster-enabled 位于632行</strong></p><h5 id="启动每个节点redis服务"><a href="#启动每个节点redis服务" class="headerlink" title="启动每个节点redis服务"></a>启动每个节点redis服务</h5><p>分别进入7001、7002、…7006目录，执行：</p><pre class="line-numbers language-shell"><code class="language-shell">./redis-server ./redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="然后查看进程"><a href="#然后查看进程" class="headerlink" title="然后查看进程"></a>然后查看进程</h5><pre class="line-numbers language-shell"><code class="language-shell">ps -ef | grep redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="执行创建集群命令"><a href="#执行创建集群命令" class="headerlink" title="执行创建集群命令"></a>执行创建集群命令</h5><p>在/usr/local/redis-cluster/下</p><h5 id="执行redis-trib-rb，此脚本是ruby脚本，它依赖ruby环境。"><a href="#执行redis-trib-rb，此脚本是ruby脚本，它依赖ruby环境。" class="headerlink" title="执行redis-trib.rb，此脚本是ruby脚本，它依赖ruby环境。"></a>执行redis-trib.rb，此脚本是ruby脚本，它依赖ruby环境。</h5><pre class="line-numbers language-shell"><code class="language-shell">./redis-trib.rb create --replicas 1 192.168.127.131:7001 192.168.127.131:7002 192.168.127.131:7003 192.168.127.131:7004 192.168.127.131:7005 192.168.127.131:7006<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>(修改为你自己的ip+端口号)</strong></p><h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><p>redis集群至少需要3个主节点，每个主节点有一个从节点总共6个节点</p><p>replicas指定为1表示每个主节点有一个从节点</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>如果执行时报如下错误：</p><p>[ERR] Node XXXXXX is not empty. Either the node already knows other nodes (check with CLUSTER NODES) or contains some key in database 0</p><p>解决方法是删除生成的配置文件<strong>nodes.conf</strong>，如果不行则说明现在创建的结点包括了旧集群的结点信息，需要删除redis的持久化文件后再重启redis，比如：<strong>appendonly.aof、dump.rdb</strong></p><h5 id="创建集群输出如下"><a href="#创建集群输出如下" class="headerlink" title="创建集群输出如下"></a>创建集群输出如下</h5><pre class="line-numbers language-shell"><code class="language-shell">>>> Creating cluster>>> Performing hash slots allocation on 6 nodes...Using 3 masters:192.168.106.132:7001192.168.106.132:7002192.168.106.132:7003Adding replica 192.168.106.132:7004 to 192.168.106.132:7001Adding replica 192.168.106.132:7005 to 192.168.106.132:7002Adding replica 192.168.106.132:7006 to 192.168.106.132:7003M: 6c388e0cd04990b23e2e65b285b5f9c1bc996538 192.168.106.132:7001slots:0-5460 (5461 slots) masterM: 01e9cd67978b1cad73a40e9a70000a236744cb17 192.168.106.132:7002slots:5461-10922 (5462 slots) masterM: 72a649017fdd5d4045f9d58df8b231c2d69e6c32 192.168.106.132:7003slots:10923-16383 (5461 slots) masterS: b90aa487cf48270df43e79af98807bb5ffabbe34 192.168.106.132:7004replicates 6c388e0cd04990b23e2e65b285b5f9c1bc996538S: f873f54c61dbb613df58fa4b9ff8bc3dd48e2388 192.168.106.132:7005replicates 01e9cd67978b1cad73a40e9a70000a236744cb17S: daa813e169580417f4410fac86a3d4ab9abda804 192.168.106.132:7006replicates 72a649017fdd5d4045f9d58df8b231c2d69e6c32Can I set the above configuration? (type 'yes' to accept): yes>>> Nodes configuration updated>>> Assign a different config epoch to each node>>> Sending CLUSTER MEET messages to join the clusterWaiting for the cluster to join.....>>> Performing Cluster Check (using node 192.168.106.132:7001)M: 6c388e0cd04990b23e2e65b285b5f9c1bc996538 192.168.106.132:7001slots:0-5460 (5461 slots) master1 additional replica(s)S: b90aa487cf48270df43e79af98807bb5ffabbe34 192.168.106.132:7004slots: (0 slots) slavereplicates 6c388e0cd04990b23e2e65b285b5f9c1bc996538M: 72a649017fdd5d4045f9d58df8b231c2d69e6c32 192.168.106.132:7003slots:10923-16383 (5461 slots) master1 additional replica(s)M: 01e9cd67978b1cad73a40e9a70000a236744cb17 192.168.106.132:7002slots:5461-10922 (5462 slots) master1 additional replica(s)S: daa813e169580417f4410fac86a3d4ab9abda804 192.168.106.132:7006slots: (0 slots) slavereplicates 72a649017fdd5d4045f9d58df8b231c2d69e6c32S: f873f54c61dbb613df58fa4b9ff8bc3dd48e2388 192.168.106.132:7005slots: (0 slots) slavereplicates 01e9cd67978b1cad73a40e9a70000a236744cb17[OK] All nodes agree about slots configuration.>>> Check for open slots...>>> Check slots coverage...[OK] All 16384 slots covered.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查询集群信息"><a href="#查询集群信息" class="headerlink" title="查询集群信息"></a>查询集群信息</h5><p><strong>集群创建成功登陆任意redis结点查询集群中的节点情况</strong></p><pre class="line-numbers language-shell"><code class="language-shell">./redis-cli -c -p 7001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">./redis-cli -c -p 7002<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以此类推<br>集群创建完毕</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> java </tag>
            
            <tag> 高并发 </tag>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之单例模式</title>
      <link href="/2020/01/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/01/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之单例模式"><a href="#设计模式之单例模式" class="headerlink" title="设计模式之单例模式"></a>设计模式之单例模式</h1><h2 id="单例模式的关键点"><a href="#单例模式的关键点" class="headerlink" title="单例模式的关键点"></a>单例模式的关键点</h2><h4 id="1-构造方法不对外开放-为private（调用不能用new）"><a href="#1-构造方法不对外开放-为private（调用不能用new）" class="headerlink" title="1. 构造方法不对外开放,为private（调用不能用new）"></a>1. 构造方法不对外开放,为private（调用不能用new）</h4><h4 id="2-确保单例类只有一个对象-尤其是多线程模式下"><a href="#2-确保单例类只有一个对象-尤其是多线程模式下" class="headerlink" title="2. 确保单例类只有一个对象,尤其是多线程模式下"></a>2. 确保单例类只有一个对象,尤其是多线程模式下</h4><h4 id="3-通过静态方法或枚举返回单例对象"><a href="#3-通过静态方法或枚举返回单例对象" class="headerlink" title="3. 通过静态方法或枚举返回单例对象"></a>3. 通过静态方法或枚举返回单例对象</h4><h4 id="4-确保单例类在反序列化是不会重新创建新的对象"><a href="#4-确保单例类在反序列化是不会重新创建新的对象" class="headerlink" title="4. 确保单例类在反序列化是不会重新创建新的对象"></a>4. 确保单例类在反序列化是不会重新创建新的对象</h4><h2 id="单例模式的实现方式"><a href="#单例模式的实现方式" class="headerlink" title="单例模式的实现方式"></a>单例模式的实现方式</h2><h4 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1.饿汉式"></a>1.饿汉式</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton1</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/** 饿汉式是在声明的时候就已经初始化Singleton1,确保了对象的唯一性** 声明的时候就初始化对象会浪费不必要的资源* */</span><span class="token keyword">private</span> <span class="token keyword">static</span> Singleton1 instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token function">Singleton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过静态方法或枚举返回单例对象</span><span class="token keyword">public</span> Singleton1 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2. 懒汉式"></a>2. 懒汉式</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton2</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> Singleton2 instance<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token function">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** getInstance 添加了synchronized 关键字,,也就是说getInstance 是一个同步方法,* 这就是懒汉式在多线程中保持唯一性的方式** 懒汉式存在的问题是,即是instance已经被创建,每次调用getInstance方法还是会同步,这样就会浪费一些不必要的资源* */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton2 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="双重检查，双重判断锁"><a href="#双重检查，双重判断锁" class="headerlink" title="双重检查，双重判断锁"></a>双重检查，双重判断锁</h4><p><strong>线程安全式中，同步了整个getInstance方法才保证了线程安全，会浪费很多性能。于是我们可以使用双重检查式，它将只在初次创建实例的时候实现同步。（了解锁优化的同学可以理解为减少锁的颗粒度）</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** volatile : 另外，为了必免jvm在指令优化时，对创建对象(new)过程出现的指令重排序现象，需要组引用对象用volatile修饰* 通过在getInstance方法上加上同步锁，进行线程控制* */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton uniqueSingleton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> uniqueSingleton<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//synchronized： </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> uniqueSingleton<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    uniqueSingleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> uniqueSingleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="静态内部类单例模式"><a href="#静态内部类单例模式" class="headerlink" title="静态内部类单例模式"></a>静态内部类单例模式</h4><p><strong>只有第一次调用getInstance方法时，虚拟机才加载 Inner 并初始化instance ，只有一个线程可以获得对象的初始化锁，其他线程无法进行初始化，保证对象的唯一性。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> Inner<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>          <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PO,BO,VO,DTO,POJO,DAO解释</title>
      <link href="/2020/01/14/po,vo,bo,dto,dao%E8%A7%A3%E9%87%8A/"/>
      <url>/2020/01/14/po,vo,bo,dto,dao%E8%A7%A3%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="PO："><a href="#PO：" class="headerlink" title="PO："></a>PO：</h2><h3 id="persistant-object持久对象"><a href="#persistant-object持久对象" class="headerlink" title="persistant object持久对象"></a>persistant object持久对象</h3><p>最形象的理解就是一个<strong>PO就是数据库中的一条记录</strong>。</p><p>好处是可以把一条记录作为一个对象处理，可以方便的转为其它对象。</p><h2 id="BO："><a href="#BO：" class="headerlink" title="BO："></a>BO：</h2><h3 id="businessobject业务对象"><a href="#businessobject业务对象" class="headerlink" title="businessobject业务对象"></a>businessobject业务对象</h3><p><strong>主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。</strong></p><p>比如一个简历，有教育经历、工作经历、社会关系等等。</p><p>我们可以把教育经历对应一个PO，工作经历对应一个PO，社会关系对应一个PO。</p><p>建立一个对应简历的BO对象处理简历，每个BO包含这些PO。</p><p>这样处理业务逻辑时，我们就可以针对BO去处理。</p><h2 id="VO-："><a href="#VO-：" class="headerlink" title="VO ："></a>VO ：</h2><h3 id="value-object值对象"><a href="#value-object值对象" class="headerlink" title="value object值对象"></a>value object值对象</h3><p>ViewObject表现层对象</p><p>主要对应界面显示的数据对象。</p><p>对于一个WEB页面，或者SWT、SWING的一个界面，用一个VO 对象对应整个界面的值。(包含界面所有值的对象)</p><h2 id="DTO-："><a href="#DTO-：" class="headerlink" title="DTO ："></a>DTO ：</h2><h3 id="Data-Transfer-Object数据传输对象"><a href="#Data-Transfer-Object数据传输对象" class="headerlink" title="Data Transfer Object数据传输对象"></a>Data Transfer Object数据传输对象</h3><p>主要用于远程调用等需要大量传输对象的地方。</p><p>比如我们一张表有50个字段，那么对应的PO就有50个属性。</p><p>但是我们界面上只要显示10个字段， 客户端用WEB service来获取数据，</p><p>没有必要把整个PO对象传递到客户端， 这时我们就可以用只有这10个属性的DTO来传递结果到客户端，</p><p>这样也不会暴露服务端表结构.到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO</p><h2 id="POJO-："><a href="#POJO-：" class="headerlink" title="POJO ："></a>POJO ：</h2><h3 id="plain-ordinary-java-object-简单java对象"><a href="#plain-ordinary-java-object-简单java对象" class="headerlink" title="plain ordinary java object 简单java对象"></a>plain ordinary java object 简单java对象</h3><p>个人感觉POJO是最常见最多变的对象，是一个中间对象，也是我们最常打交道的对象。</p><p>一个POJO持久化以后就是PO 直接用它传递、传递过程中就是DTO 直接用来对应表示层就是VO</p><h2 id="DAO："><a href="#DAO：" class="headerlink" title="DAO："></a>DAO：</h2><h3 id="data-access-object数据访问对象"><a href="#data-access-object数据访问对象" class="headerlink" title="data access object数据访问对象"></a>data access object数据访问对象</h3><p>这个大家最熟悉，和上面几个O区别最大，基本没有互相转化的可能性和必要. <strong>主要用来封装对数据库的访问</strong>。</p><p>通过它可以把POJO持久化为PO，用PO组装出来VO、DTO 总结下我认为一个对象究竟是什么O要看具体环境，在不同的层、不同的应用场合，对象的身份也 不一样，而且对象身份的转化也是很自然的。设计这些概念的初衷不是为了唬人而是为了更好的理解和处理各种逻辑，让大家能更好的去用面向 对象的方式处理问题.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> DAO </tag>
            
            <tag> PO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表单上传图片</title>
      <link href="/2020/01/13/%E8%A1%A8%E5%8D%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
      <url>/2020/01/13/%E8%A1%A8%E5%8D%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="表单上传图片"><a href="#表单上传图片" class="headerlink" title="表单上传图片"></a>表单上传图片</h1><h2 id="1-表单"><a href="#1-表单" class="headerlink" title="1.表单"></a>1.表单</h2><p>1.在form表单中加入属性：<strong>enctype=”multipart/form-data”</strong><br>2.在form表单中给一个input框 type类型为file 的输入框还有给name</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>photo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h2><p>在struts.xml中配置<br><strong>设置struts2上传的文件大小，默认情况下的大小是2M ，默认单位是B,目前允许上传的最大为100M</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constant</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>struts.multipart.maxSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>104857600<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-controller-action（控制层）"><a href="#3-controller-action（控制层）" class="headerlink" title="3.controller/action（控制层）"></a>3.controller/action（控制层）</h2><h4 id="1-接收图片的参数定义规则："><a href="#1-接收图片的参数定义规则：" class="headerlink" title="1.接收图片的参数定义规则："></a>1.接收图片的参数定义规则：</h4><p>文件名称的接收:<strong>必须定义的是全局变量，表单中的file框中的name值加上FileName;</strong></p><h4 id="2-接收文件内容的参数"><a href="#2-接收文件内容的参数" class="headerlink" title="2.接收文件内容的参数"></a>2.接收文件内容的参数</h4><p>private File photo；<br><strong>属性名和input中的name值一样。</strong></p><h2 id="4-文件的上传操作"><a href="#4-文件的上传操作" class="headerlink" title="4.文件的上传操作"></a>4.文件的上传操作</h2><h4 id="1-文件重命名"><a href="#1-文件重命名" class="headerlink" title="1.文件重命名"></a>1.文件重命名</h4><h4 id="2-文件的上传"><a href="#2-文件的上传" class="headerlink" title="2.文件的上传"></a>2.文件的上传</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>fh<span class="token punctuation">.</span>action<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>struts2<span class="token punctuation">.</span>ServletActionContext<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** @ClassName: FileUpload* @author yuchunqiang**/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUpload</span> <span class="token punctuation">{</span><span class="token keyword">private</span> String photoFileName<span class="token punctuation">;</span><span class="token keyword">private</span> File photo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>photoFileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第一大步就是给文件重命名</span><span class="token comment" spellcheck="true">// 先获取文件的后缀名</span>String suffix <span class="token operator">=</span>photoFileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>photoFileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取一个32位的UUID</span>String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>String newFileName <span class="token operator">=</span> uuid <span class="token operator">+</span> suffix<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第二大步,就是将文件上传到指定文件夹中。</span><span class="token comment" spellcheck="true">// 1.获取项目的发布路径</span>String realPath <span class="token operator">=</span>ServletActionContext<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 读取服务器上的文件目录</span>File filemdk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realPath <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token string">"photo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filemdk<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>filemdk<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输入流</span>FileInputStream fis <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出流FileOutputStream fos = null;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 获取输入流</span>fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>photo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构建输出流</span>fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filemdk <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> newFileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>fis<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fos <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> String <span class="token function">getPhotoFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> photoFileName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPhotoFileName</span><span class="token punctuation">(</span>String photoFileName<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>photoFileName <span class="token operator">=</span> photoFileName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> File <span class="token function">getPhoto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> photo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPhoto</span><span class="token punctuation">(</span>File photo<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>photo <span class="token operator">=</span> photo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-项目中的图片上传"><a href="#5-项目中的图片上传" class="headerlink" title="5.项目中的图片上传"></a>5.项目中的图片上传</h2><p><strong>action类中还要加入图片的删除操作</strong></p><pre class="line-numbers language-java"><code class="language-java">String realPath <span class="token operator">=</span> ServletActionContext<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String oldFilePath <span class="token operator">=</span> game<span class="token punctuation">.</span><span class="token function">getCimgurl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realPath <span class="token operator">+</span> oldFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> html </tag>
            
            <tag> form </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Restful风格接口</title>
      <link href="/2020/01/10/Restful%E9%A3%8E%E6%A0%BC%E6%8E%A5%E5%8F%A3/"/>
      <url>/2020/01/10/Restful%E9%A3%8E%E6%A0%BC%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Restful风格接口"><a href="#Restful风格接口" class="headerlink" title="Restful风格接口"></a>Restful风格接口</h1><p><strong>Restful风格的API是一种软件架构风格，设计风格而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</strong><br><strong>在Restful风格中，用户请求的url使用同一个url而用请求方式：get，post，delete，put…等方式对请求的处理方法进行区分，这样可以在前后台分离式的开发中使得前端开发人员不会对请求的资源地址产生混淆和大量的检查方法名的麻烦，形成一个统一的接口。</strong></p><h2 id="规定如下"><a href="#规定如下" class="headerlink" title="规定如下"></a>规定如下</h2><h5 id="GET（SELECT）："><a href="#GET（SELECT）：" class="headerlink" title="GET（SELECT）："></a>GET（SELECT）：</h5><p>从服务器查询，可以在服务器通过请求的参数区分查询的方式。</p><h5 id="POST（CREATE）："><a href="#POST（CREATE）：" class="headerlink" title="POST（CREATE）："></a>POST（CREATE）：</h5><p>在服务器新建一个资源，调用insert操作。</p><h5 id="PUT（UPDATE）："><a href="#PUT（UPDATE）：" class="headerlink" title="PUT（UPDATE）："></a>PUT（UPDATE）：</h5><p>在服务器更新资源，调用update操作。</p><h5 id="PATCH（UPDATE）："><a href="#PATCH（UPDATE）：" class="headerlink" title="PATCH（UPDATE）："></a>PATCH（UPDATE）：</h5><p>在服务器更新资源（客户端提供改变的属性）。(目前jdk7未实现，tomcat7也不行)。</p><h5 id="DELETE（DELETE）："><a href="#DELETE（DELETE）：" class="headerlink" title="DELETE（DELETE）："></a>DELETE（DELETE）：</h5><p>从服务器删除资源，调用delete语句。</p><h4 id="了解这个风格定义以后，我们举个例子"><a href="#了解这个风格定义以后，我们举个例子" class="headerlink" title="了解这个风格定义以后，我们举个例子"></a>了解这个风格定义以后，我们举个例子</h4><p><strong>如果当前url是<a href="http://localhost:8080/User" target="_blank" rel="noopener">http://localhost:8080/User</a><br>那么用户只要请求这样同一个URL就可以实现不同的增删改查操作</strong><br>例如</p><p><a href="http://localhost:8080/User?_method=get&amp;id=1001" target="_blank" rel="noopener">http://localhost:8080/User?_method=get&amp;id=1001</a>　　<strong>这样就可以通过get请求获取到数据库 user 表里面 id=1001 的用户信息</strong></p><p><a href="http://localhost:8080/User?_method=post&amp;id=1001&amp;name=zhangsan" target="_blank" rel="noopener">http://localhost:8080/User?_method=post&amp;id=1001&amp;name=zhangsan</a>　　<strong>这样可以向数据库 user 表里面插入一条记录</strong></p><p><a href="http://localhost:8080/User?_method=put&amp;id=1001&amp;name=lisi" target="_blank" rel="noopener">http://localhost:8080/User?_method=put&amp;id=1001&amp;name=lisi</a>　　<strong>这样可以将 user表里面 id=1001 的用户名改为lisi</strong></p><p><a href="http://localhost:8080/User?_method=delete&amp;id=1001" target="_blank" rel="noopener">http://localhost:8080/User?_method=delete&amp;id=1001</a>　　<strong>这样用于将数据库 user 表里面的id=1001 的信息删除</strong><br><strong>这样定义的规范我们就可以称之为restful风格的API接口，我们可以通过同一个url来实现各种操作。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Restful </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot+mysql数据源切换</title>
      <link href="/2020/01/09/springboot+mysql%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/"/>
      <url>/2020/01/09/springboot+mysql%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="springboot-mysql数据源切换"><a href="#springboot-mysql数据源切换" class="headerlink" title="springboot+mysql数据源切换"></a>springboot+mysql数据源切换</h2><h5 id="这里我做的是mysql读写分离，我是建立了两个链接，分别用了不同的端口号来分开（当然也可以区分数据库，这个根据自己所需-）"><a href="#这里我做的是mysql读写分离，我是建立了两个链接，分别用了不同的端口号来分开（当然也可以区分数据库，这个根据自己所需-）" class="headerlink" title="这里我做的是mysql读写分离，我是建立了两个链接，分别用了不同的端口号来分开（当然也可以区分数据库，这个根据自己所需 ）"></a>这里我做的是mysql读写分离，我是建立了两个链接，分别用了不同的端口号来分开（当然也可以区分数据库，这个根据自己所需 ）</h5><h4 id="首先是在是在springboot项目中的，application-properties文件中连接的"><a href="#首先是在是在springboot项目中的，application-properties文件中连接的" class="headerlink" title="首先是在是在springboot项目中的，application.properties文件中连接的"></a>首先是在是在springboot项目中的，application.properties文件中连接的</h4><pre class="line-numbers language-java"><code class="language-java">spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>select<span class="token punctuation">.</span>jdbc<span class="token operator">-</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3308</span><span class="token operator">/</span>productspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>select<span class="token punctuation">.</span>username<span class="token operator">=</span>rootspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>select<span class="token punctuation">.</span>password<span class="token operator">=</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>select<span class="token punctuation">.</span>driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driverspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>update<span class="token punctuation">.</span>jdbc<span class="token operator">-</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3307</span><span class="token operator">/</span>productspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>update<span class="token punctuation">.</span>username<span class="token operator">=</span>rootspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>update<span class="token punctuation">.</span>password<span class="token operator">=</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>update<span class="token punctuation">.</span>driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver#加载mapper文件mybatis<span class="token punctuation">.</span>mapper<span class="token operator">-</span>locations<span class="token operator">=</span>classpath<span class="token operator">*</span><span class="token operator">:</span>mapper<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>xml#修改访问端口server<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">8099</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二-接下来我们添加工具包"><a href="#二-接下来我们添加工具包" class="headerlink" title="二.接下来我们添加工具包"></a>二.接下来我们添加工具包</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>fh<span class="token punctuation">.</span>datademo<span class="token punctuation">.</span>datasoucedynamic<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>DataSourceBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yuchunqiang * @Title: DataSourceConfig * @Package com.fh.datademo.datasoucedynamic * @Description: ${todo} * @date 2018/10/24  16:01 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"selectDataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.select"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">dataSource1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"updateDataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">dataSource2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="这个主要用来找到两个mysql的连接，并提供给另外一个工具包决定我们的方法到底走application-properties中哪一个连接"><a href="#这个主要用来找到两个mysql的连接，并提供给另外一个工具包决定我们的方法到底走application-properties中哪一个连接" class="headerlink" title="这个主要用来找到两个mysql的连接，并提供给另外一个工具包决定我们的方法到底走application.properties中哪一个连接"></a>这个主要用来找到两个mysql的连接，并提供给另外一个工具包决定我们的方法到底走application.properties中哪一个连接</h5><h5 id="一"><a href="#一" class="headerlink" title="一"></a>一</h5><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">package</span> com<span class="token punctuation">.</span>fh<span class="token punctuation">.</span>datademo<span class="token punctuation">.</span>datasoucedynamic<span class="token punctuation">;</span> <span class="token number">2</span>  <span class="token number">3</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Lazy<span class="token punctuation">;</span> <span class="token number">4</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span> <span class="token number">5</span>  <span class="token number">6</span> <span class="token comment" spellcheck="true">/** 7  * @author yuchunqiang 8  * @Title: DataSourceContextHolder 9  * @Package com.fh.datademo.datasoucedynamic10  * @Description: ${todo}11  * @date 2018/10/24  16:0012  */</span><span class="token number">13</span> <span class="token annotation punctuation">@Component</span><span class="token number">14</span> <span class="token annotation punctuation">@Lazy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token number">15</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceContextHolder</span> <span class="token punctuation">{</span><span class="token number">16</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> contextHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">17</span> <span class="token number">18</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setDbType</span><span class="token punctuation">(</span>String dbType<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">19</span>         contextHolder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>dbType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">20</span>     <span class="token punctuation">}</span><span class="token number">21</span> <span class="token number">22</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getDbType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">23</span>         <span class="token keyword">return</span> contextHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">24</span>     <span class="token punctuation">}</span><span class="token number">25</span> <span class="token number">26</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clearDbType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">27</span>         contextHolder<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">28</span>     <span class="token punctuation">}</span><span class="token number">29</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="二"><a href="#二" class="headerlink" title="二"></a>二</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>fh<span class="token punctuation">.</span>datademo<span class="token punctuation">.</span>datasoucedynamic<span class="token punctuation">;</span> <span class="token number">2</span>  <span class="token number">3</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span> <span class="token number">4</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span> <span class="token number">5</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Primary<span class="token punctuation">;</span> <span class="token number">6</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>lookup<span class="token punctuation">.</span>AbstractRoutingDataSource<span class="token punctuation">;</span> <span class="token number">7</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span> <span class="token number">8</span>  <span class="token number">9</span> <span class="token number">10</span> <span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token number">11</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token number">12</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token number">13</span> <span class="token number">14</span> <span class="token comment" spellcheck="true">/**15  * @author yuchunqiang16  * @Title: DynamicDataSource17  * @Package com.fh.datademo.datasoucedynamic18  * @Description: ${todo}19  * @date 2018/10/24  16:0620  */</span><span class="token number">21</span> <span class="token annotation punctuation">@Component</span><span class="token number">22</span> <span class="token annotation punctuation">@Primary</span><span class="token number">23</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDataSource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutingDataSource</span> <span class="token punctuation">{</span><span class="token number">24</span> <span class="token number">25</span>     <span class="token annotation punctuation">@Autowired</span><span class="token number">26</span>     <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"selectDataSource"</span><span class="token punctuation">)</span><span class="token number">27</span>     <span class="token keyword">private</span> DataSource selectDataSource<span class="token punctuation">;</span><span class="token number">28</span> <span class="token number">29</span>     <span class="token annotation punctuation">@Autowired</span><span class="token number">30</span>     <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"updateDataSource"</span><span class="token punctuation">)</span><span class="token number">31</span>     <span class="token keyword">private</span> DataSource updateDataSource<span class="token punctuation">;</span><span class="token number">32</span> <span class="token number">33</span>     <span class="token comment" spellcheck="true">/**34      * 这个是主要的方法，返回的是生效的数据源名称35      */</span><span class="token number">36</span>     <span class="token annotation punctuation">@Override</span><span class="token number">37</span>     <span class="token keyword">protected</span> Object <span class="token function">determineCurrentLookupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">38</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DataSourceContextHolder：：："</span><span class="token operator">+</span>DataSourceContextHolder<span class="token punctuation">.</span><span class="token function">getDbType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">39</span>         <span class="token keyword">return</span> DataSourceContextHolder<span class="token punctuation">.</span><span class="token function">getDbType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">40</span>     <span class="token punctuation">}</span><span class="token number">41</span> <span class="token number">42</span>     <span class="token comment" spellcheck="true">/**43      * 自己配的时候老是报什么没有指定target这里设置一下，默认数据源是updateDataSource44      */</span><span class="token number">45</span>     <span class="token annotation punctuation">@Override</span><span class="token number">46</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">47</span>         Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">48</span>         map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"selectDataSource"</span><span class="token punctuation">,</span>selectDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">49</span>         map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"updateDataSource"</span><span class="token punctuation">,</span>updateDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">50</span>         <span class="token function">setTargetDataSources</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">51</span>         <span class="token function">setDefaultTargetDataSource</span><span class="token punctuation">(</span>updateDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">52</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">53</span>     <span class="token punctuation">}</span><span class="token number">54</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="三"><a href="#三" class="headerlink" title="三"></a>三</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>fh<span class="token punctuation">.</span>datademo<span class="token punctuation">.</span>datasoucedynamic<span class="token punctuation">;</span> <span class="token number">2</span>  <span class="token number">3</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>JoinPoint<span class="token punctuation">;</span> <span class="token number">4</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span> <span class="token number">5</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span> <span class="token number">6</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Lazy<span class="token punctuation">;</span> <span class="token number">7</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Order<span class="token punctuation">;</span> <span class="token number">8</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">/**11  * @author yuchunqiang12  * @Title: SwitchDataSourceAOP13  * @Package com.fh.datademo.datasoucedynamic14  * @Description: ${todo}15  * @date 2018/10/24  15:5416  */</span><span class="token number">17</span> <span class="token annotation punctuation">@Aspect</span><span class="token number">18</span> <span class="token annotation punctuation">@Component</span><span class="token number">19</span> <span class="token annotation punctuation">@Lazy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token number">20</span> <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Order设定AOP执行顺序 使之在数据库事务上先执行</span><span class="token number">21</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwitchDataSourceAOP</span> <span class="token punctuation">{</span><span class="token number">22</span> <span class="token number">23</span>     <span class="token comment" spellcheck="true">//这里切到你的方法目录</span><span class="token number">24</span>     <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.fh.datademo.service.*.*.*(..))"</span><span class="token punctuation">)</span><span class="token number">25</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">26</span>         String methodName<span class="token operator">=</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">27</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>methodName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span><span class="token number">28</span>                 <span class="token operator">||</span>methodName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token number">29</span>                 <span class="token operator">||</span>methodName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"find"</span><span class="token punctuation">)</span><span class="token number">30</span>                 <span class="token operator">||</span>methodName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span><span class="token number">31</span>                 <span class="token operator">||</span>methodName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">)</span><span class="token number">32</span>                 <span class="token operator">||</span>methodName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"check"</span><span class="token punctuation">)</span><span class="token number">33</span>                 <span class="token operator">||</span>methodName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">34</span>             DataSourceContextHolder<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span><span class="token string">"selectDataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">35</span>         <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token number">36</span>             <span class="token comment" spellcheck="true">//切换dataSource</span><span class="token number">37</span>             DataSourceContextHolder<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span><span class="token string">"updateDataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">38</span>         <span class="token punctuation">}</span><span class="token number">39</span>     <span class="token punctuation">}</span><span class="token number">40</span> <span class="token number">41</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>用来在走方法之前，来决定走哪个数据源，在@Before的设置中（@Before(“execution(* com.fh.datademo.service.<em>.</em>.*(..))”)）决定具体到哪个包，具体到哪个类，然后获取其方法名来判断，方法名中包含所规定的字符，则走读的数据源，否则走写的数据源。从而来达到读写分离，实现自动切换的功能</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> spring </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring依赖注入（DI）的三种方式</title>
      <link href="/2020/01/08/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%88DI%EF%BC%89%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/01/08/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%88DI%EF%BC%89%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring依赖注入（DI）的三种方式"><a href="#Spring依赖注入（DI）的三种方式" class="headerlink" title="Spring依赖注入（DI）的三种方式"></a>Spring依赖注入（DI）的三种方式</h1><h3 id="Spring依赖注入（DI）的三种方式，分别为："><a href="#Spring依赖注入（DI）的三种方式，分别为：" class="headerlink" title="Spring依赖注入（DI）的三种方式，分别为："></a>Spring依赖注入（DI）的三种方式，分别为：</h3><h5 id="1．-接口注入"><a href="#1．-接口注入" class="headerlink" title="1．  接口注入"></a>1．  接口注入</h5><h5 id="2．-Setter方法注入"><a href="#2．-Setter方法注入" class="headerlink" title="2．  Setter方法注入"></a>2．  Setter方法注入</h5><h5 id="3．-构造方法注入"><a href="#3．-构造方法注入" class="headerlink" title="3．  构造方法注入"></a>3．  构造方法注入</h5><h3 id="下面介绍一下这三种依赖注入在Spring中是怎么样实现的。"><a href="#下面介绍一下这三种依赖注入在Spring中是怎么样实现的。" class="headerlink" title="下面介绍一下这三种依赖注入在Spring中是怎么样实现的。"></a>下面介绍一下这三种依赖注入在Spring中是怎么样实现的。</h3><h4 id="首先我们需要以下几个类："><a href="#首先我们需要以下几个类：" class="headerlink" title="首先我们需要以下几个类："></a>首先我们需要以下几个类：</h4><h6 id="接口-Logic-java"><a href="#接口-Logic-java" class="headerlink" title="接口 Logic.java"></a>接口 Logic.java</h6><h6 id="接口实现类-LogicImpl-java"><a href="#接口实现类-LogicImpl-java" class="headerlink" title="接口实现类 LogicImpl.java"></a>接口实现类 LogicImpl.java</h6><h6 id="一个处理类-LoginAction-java"><a href="#一个处理类-LoginAction-java" class="headerlink" title="一个处理类 LoginAction.java"></a>一个处理类 LoginAction.java</h6><h6 id="还有一个测试类-TestMain-java"><a href="#还有一个测试类-TestMain-java" class="headerlink" title="还有一个测试类 TestMain.java"></a>还有一个测试类 TestMain.java</h6><h5 id="Logic-java如下："><a href="#Logic-java如下：" class="headerlink" title="Logic.java如下："></a>Logic.java如下：</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>test<span class="token punctuation">.</span>di; <span class="token keyword">public</span>  <span class="token keyword">interface</span>  <span class="token class-name">Logic</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span>  String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ;<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="LogicImpl-java如下："><a href="#LogicImpl-java如下：" class="headerlink" title="LogicImpl.java如下："></a>LogicImpl.java如下：</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>test<span class="token punctuation">.</span>di; <span class="token keyword">public</span>  <span class="token keyword">class</span>  <span class="token class-name">LogicImpl</span> <span class="token keyword">implements</span>  <span class="token class-name">Logic</span><span class="token punctuation">{</span>    <span class="token keyword">public</span>  String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span>  <span class="token string">"养九的博客"</span> ;    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="TestMain-java如下："><a href="#TestMain-java如下：" class="headerlink" title="TestMain.java如下："></a>TestMain.java如下：</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>test<span class="token punctuation">.</span>di;<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext;<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>FileSystemXmlApplicationContext;<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 得到ApplicationContext 对象        ApplicationContext ctx = new FileSystemXmlApplicationContext(</span>              <span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span> ;       <span class="token comment" spellcheck="true">// 得到Bean        LoginAction loginAction = (LoginAction) ctx.getBean("loginAction");</span>       loginAction<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ;       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="LoginAction-java-会根据使用不同的注入方法而稍有不同"><a href="#LoginAction-java-会根据使用不同的注入方法而稍有不同" class="headerlink" title="LoginAction.java 会根据使用不同的注入方法而稍有不同"></a>LoginAction.java 会根据使用不同的注入方法而稍有不同</h5><p>下面按照注入的方法来看LoginAction.java类</p><h4 id="Setter方法注入："><a href="#Setter方法注入：" class="headerlink" title="Setter方法注入："></a>Setter方法注入：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>test<span class="token punctuation">.</span>di; <span class="token keyword">public</span>  <span class="token keyword">class</span>  <span class="token class-name">LoginAction</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  Logic logic ;    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       String name <span class="token operator">=</span> logic<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ;       System<span class="token punctuation">.</span>out <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"个人博客： "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> ;      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @return  the logic     */</span>    <span class="token keyword">public</span>  Logic <span class="token function">getLogic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span>  logic ;    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param  logic     *            the logic to set     */</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">setLogic</span><span class="token punctuation">(</span>Logic logic<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span> <span class="token punctuation">.</span>logic <span class="token operator">=</span> logic ;    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="定义了一个Logic-类型的变量-logic-在LoginAction并没有对logic-进行实例化，"><a href="#定义了一个Logic-类型的变量-logic-在LoginAction并没有对logic-进行实例化，" class="headerlink" title="定义了一个Logic 类型的变量 logic, 在LoginAction并没有对logic 进行实例化，"></a>定义了一个Logic 类型的变量 logic, 在LoginAction并没有对logic 进行实例化，</h6><h6 id="而只有他对应的-setter-getter方法，因为我们这里使用的是Spring的依赖注入的方式"><a href="#而只有他对应的-setter-getter方法，因为我们这里使用的是Spring的依赖注入的方式" class="headerlink" title="而只有他对应的 setter/getter方法，因为我们这里使用的是Spring的依赖注入的方式"></a>而只有他对应的 setter/getter方法，因为我们这里使用的是Spring的依赖注入的方式</h6><h5 id="applicationContext-xml配置文件如下"><a href="#applicationContext-xml配置文件如下" class="headerlink" title="applicationContext.xml配置文件如下:"></a>applicationContext.xml配置文件如下:</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logic<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.test.di.LogicImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginAction<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.test.di.LoginAction<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logic<span class="token punctuation">"</span></span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logic<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="现在可以运行testMain-java了，我们可以看到控制台打出了-个人博客：-养九的博客"><a href="#现在可以运行testMain-java了，我们可以看到控制台打出了-个人博客：-养九的博客" class="headerlink" title="现在可以运行testMain.java了，我们可以看到控制台打出了 个人博客： 养九的博客"></a>现在可以运行testMain.java了，我们可以看到控制台打出了 个人博客： 养九的博客</h6><h6 id="这就是spring的s-etter方法注入"><a href="#这就是spring的s-etter方法注入" class="headerlink" title="这就是spring的s etter方法注入"></a>这就是spring的s etter方法注入</h6><h4 id="构造方法注入："><a href="#构造方法注入：" class="headerlink" title="构造方法注入："></a>构造方法注入：</h4><h6 id="依靠LoginAction的构造方法来达到D-I的目的"><a href="#依靠LoginAction的构造方法来达到D-I的目的" class="headerlink" title="依靠LoginAction的构造方法来达到D I的目的"></a>依靠LoginAction的构造方法来达到D I的目的</h6><h5 id="LoginAction-java："><a href="#LoginAction-java：" class="headerlink" title="LoginAction.java："></a>LoginAction.java：</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>test<span class="token punctuation">.</span>di;<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginAction</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Logic logic;    <span class="token keyword">public</span> <span class="token function">LoginAction</span><span class="token punctuation">(</span>Logic logic<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>logic <span class="token operator">=</span> logic;    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String name <span class="token operator">=</span> logic<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ;       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"个人博客："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>;    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="这里我们添加了一个LoginAction的构造方法"><a href="#这里我们添加了一个LoginAction的构造方法" class="headerlink" title="这里我们添加了一个LoginAction的构造方法"></a>这里我们添加了一个LoginAction的构造方法</h6><h5 id="applicationContext-xml配置文件如下-1"><a href="#applicationContext-xml配置文件如下-1" class="headerlink" title="applicationContext.xml配置文件如下:"></a>applicationContext.xml配置文件如下:</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logic<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.test.di.LogicImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginAction<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.test.di.LoginAction<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logic<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>我们使用constructor-arg来进行配置, index属性是用来表示构造方法中参数的顺序的，如果有多个参数，则按照顺序，从 0,1…来配置我们现在可以运行testMain.java了,结果跟使用Setter方法注入完全一样.其中需要注意一点有：构造函数有多个参数的话，如：参数1 ，参数2 ，而参数2 依赖于参数1 ，这 中情况则要注意构造函数的顺序，必须将参数1 放在参数2 之前，按照顺序。</strong></p><h4 id="接口注入："><a href="#接口注入：" class="headerlink" title="接口注入："></a>接口注入：</h4><h5 id="LogicAction-java："><a href="#LogicAction-java：" class="headerlink" title="LogicAction.java："></a>LogicAction.java：</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>test<span class="token punctuation">.</span>di; <span class="token keyword">public</span>  <span class="token keyword">class</span>  <span class="token class-name">LoginAction</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  Logic logic ;    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">try</span>  <span class="token punctuation">{</span>           Object obj <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span> <span class="token punctuation">(</span><span class="token string">"com.spring.test.di.LogicImpl"</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ;           logic <span class="token operator">=</span> <span class="token punctuation">(</span>Logic<span class="token punctuation">)</span> obj;           String name <span class="token operator">=</span> logic<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ;           System<span class="token punctuation">.</span>out <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"个人博客： "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> ;       <span class="token punctuation">}</span> <span class="token keyword">catch</span>  <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ;       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="applicationContext-xml配置文件如下-2"><a href="#applicationContext-xml配置文件如下-2" class="headerlink" title="applicationContext.xml配置文件如下:"></a>applicationContext.xml配置文件如下:</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logic<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.test.di.LogicImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginAction<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.test.di.LoginAction<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其实我们最常用的还是Setter和构造函数这两种注入方法<br><strong>对于Spring的依赖注入，最重要的就是理解他的，一旦理解了，将会觉得非常的简单。无非就是让 容器来给我们实例化那些类，我们要做的就是给容器提供这个接口，这个接口就我们的set方法或者构造函数了。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring DI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js全选复选框和反选按钮</title>
      <link href="/2020/01/07/js%E5%85%A8%E9%80%89%E5%8F%8D%E9%80%89%E6%8C%89%E9%92%AE/"/>
      <url>/2020/01/07/js%E5%85%A8%E9%80%89%E5%8F%8D%E9%80%89%E6%8C%89%E9%92%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="js全选复选框和反选按钮"><a href="#js全选复选框和反选按钮" class="headerlink" title="js全选复选框和反选按钮"></a>js全选复选框和反选按钮</h1><h4 id="js的写法在标题行增加全选复选框和反选按钮在数据行增加带name属性的复选框。"><a href="#js的写法在标题行增加全选复选框和反选按钮在数据行增加带name属性的复选框。" class="headerlink" title="js的写法在标题行增加全选复选框和反选按钮在数据行增加带name属性的复选框。"></a>js的写法在标题行增加全选复选框和反选按钮在数据行增加带name属性的复选框。</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkall<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkall()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>反选<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inverseChk()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>主键序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>。。。。。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${page.list }<span class="token punctuation">"</span></span><span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>recruit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkid<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${recruit.nid }<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span> ${recruit.nid }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>${recruit.cjob }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>。。。。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-全选和全不选-两种实现方式："><a href="#2-全选和全不选-两种实现方式：" class="headerlink" title="2.全选和全不选 两种实现方式："></a>2.全选和全不选 两种实现方式：</h4><h5 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//全选和全不选(prop())(jq 的循环方式)</span><span class="token keyword">function</span> <span class="token function">checkAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//获取数据行的所有复选框</span><span class="token keyword">var</span> bankchk<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"[name='checkid']"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> banks<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkall"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//jq的each循环，</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>bankchk<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span>banks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">checkall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span>"<span class="token punctuation">[</span>name<span class="token operator">=</span><span class="token string">'checkid'</span><span class="token punctuation">]</span><span class="token string">").prop("</span>checked<span class="token string">",$("</span>#checkall<span class="token string">").prop("</span>checked"<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-反选"><a href="#3-反选" class="headerlink" title="3.反选"></a>3.反选</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">inverseChk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> checkids<span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>"<span class="token punctuation">[</span>name<span class="token operator">=</span><span class="token string">'checkid'</span><span class="token punctuation">]</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>checkids<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux上redis安装</title>
      <link href="/2020/01/06/Linux%E4%B8%8Aredis%E5%AE%89%E8%A3%85/"/>
      <url>/2020/01/06/Linux%E4%B8%8Aredis%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="redis4安装"><a href="#redis4安装" class="headerlink" title="#redis4安装"></a>#redis4安装</h2><h4 id="1-第一步官网下载"><a href="#1-第一步官网下载" class="headerlink" title="1.第一步官网下载"></a>1.第一步官网下载</h4><p><a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></p><p>rz 上传或者直接</p><pre class="line-numbers language-powershell"><code class="language-powershell">wget   http:<span class="token operator">/</span><span class="token operator">/</span>download<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>io<span class="token operator">/</span>releases<span class="token operator">/</span>redis<span class="token operator">-</span>4<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、将其下载到我的-server-tools-目录下"><a href="#2、将其下载到我的-server-tools-目录下" class="headerlink" title="2、将其下载到我的/server/tools/目录下"></a>2、将其下载到我的/server/tools/目录下</h4><h4 id="3、解压并进入其目录"><a href="#3、解压并进入其目录" class="headerlink" title="3、解压并进入其目录"></a>3、解压并进入其目录</h4><p>　　</p><pre class="line-numbers language-powershell"><code class="language-powershell">tar xf redis<span class="token operator">-</span>4<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、编译源程序"><a href="#4、编译源程序" class="headerlink" title="4、编译源程序"></a>4、编译源程序</h4><p>　　</p><pre class="line-numbers language-powershell"><code class="language-powershell">make cd srcmake install PREFIX=<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5、将配置文件移动到redis目录"><a href="#5、将配置文件移动到redis目录" class="headerlink" title="5、将配置文件移动到redis目录"></a>5、将配置文件移动到redis目录</h4><p>　　</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">mv</span> <span class="token operator">/</span>server<span class="token operator">/</span>tools<span class="token operator">/</span>redis<span class="token operator">-</span>4<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf  <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">/</span>etc<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6、启动redis服务"><a href="#6、启动redis服务" class="headerlink" title="6、启动redis服务"></a>6、启动redis服务</h4><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">/</span>bin<span class="token operator">/</span>redis<span class="token operator">-</span>server  <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7、默认情况，Redis不是在后台运行，我们需要把redis放在后台运行"><a href="#7、默认情况，Redis不是在后台运行，我们需要把redis放在后台运行" class="headerlink" title="7、默认情况，Redis不是在后台运行，我们需要把redis放在后台运行　"></a>7、默认情况，Redis不是在后台运行，我们需要把redis放在后台运行　</h4><pre class="line-numbers language-powershell"><code class="language-powershell">vim <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将daemonize的值改为yes<br> 将bind 本机ip或127.0.0.1</p><h4 id="8、客户端连接"><a href="#8、客户端连接" class="headerlink" title="8、客户端连接"></a>8、客户端连接</h4><p>名字</p><p>link IP地址</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">/</span>bin<span class="token operator">/</span>redis<span class="token operator">-</span><span class="token function">cli</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[root@m01 bin]# /usr/local/redis/bin/redis-server  /usr/local/redis/etc/redis.conf 9014:C 07 Nov 22:45:49.763 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo 9014:C 07 Nov 22:45:49.763 # Redis version=4.0.2, bits=64, commit=00000000, modified=0, pid=9014, just started 9014:C 07 Nov 22:45:49.764 # Configuration loaded [root@m01 bin]# /usr/local/redis/bin/redis-cli 127.0.0.1:6379&gt; set test “laotansauncai” OK 127.0.0.1:6379&gt; get test “laotansauncai” 127.0.0.1:6379&gt;</p><h4 id="9、停止redis实例"><a href="#9、停止redis实例" class="headerlink" title="9、停止redis实例"></a>9、停止redis实例</h4><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">/</span>bin<span class="token operator">/</span>redis<span class="token operator">-</span><span class="token function">cli</span> shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-powershell"><code class="language-powershell">pkill redis<span class="token operator">-</span>server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="10、让redis开机自启"><a href="#10、让redis开机自启" class="headerlink" title="10、让redis开机自启"></a>10、让redis开机自启</h4><p>　</p><p>　vim /etc/rc.local</p><p>　　加入</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">/</span>bin<span class="token operator">/</span>redis<span class="token operator">-</span>server <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">-</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="11、接下来我们看看-usr-local-redis-bin目录下的几个文件时什么"><a href="#11、接下来我们看看-usr-local-redis-bin目录下的几个文件时什么" class="headerlink" title="11、接下来我们看看/usr/local/redis/bin目录下的几个文件时什么"></a>11、接下来我们看看/usr/local/redis/bin目录下的几个文件时什么</h4><p>　　redis-benchmark：redis性能测试工具</p><p>　　redis-check-aof：检查aof日志的工具</p><p>　　redis-check-dump：检查rdb日志的工具</p><p>　　redis-cli：连接用的客户端</p><p>　　redis-server：redis服务进程</p><p>Redis的配置</p><p>　　daemonize：如需要在后台运行，把该项的值改为yes</p><p>　　pdifile：把pid文件放在/var/run/redis.pid，可以配置到其他地址</p><p>　　bind：指定redis只接收来自该IP的请求，如果不设置，那么将处理所有请求，在生产环节中最好设置该项</p><p>　　port：监听端口，默认为6379</p><p>　　timeout：设置客户端连接时的超时时间，单位为秒</p><p>　　loglevel：等级分为4级，debug，revbose，notice和warning。生产环境下一般开启notice</p><p>　　logfile：配置log文件地址，默认使用标准输出，即打印在命令行终端的端口上</p><p>　　database：设置数据库的个数，默认使用的数据库是0</p><p>　　save：设置redis进行数据库镜像的频率</p><p>　　rdbcompression：在进行镜像备份时，是否进行压缩</p><p>　　dbfilename：镜像备份文件的文件名</p><p>　　dir：数据库镜像备份的文件放置的路径</p><p>　　slaveof：设置该数据库为其他数据库的从数据库</p><p>　　masterauth：当主数据库连接需要密码验证时，在这里设定</p><p>　　requirepass：设置客户端连接后进行任何其他指定前需要使用的密码</p><p>　　maxclients：限制同时连接的客户端数量</p><p>　　maxmemory：设置redis能够使用的最大内存</p><p>　　appendonly：开启appendonly模式后，redis会把每一次所接收到的写操作都追加到appendonly.aof文件中，当redis重新启动时，会从该文件恢复出之前的状态</p><p>　　appendfsync：设置appendonly.aof文件进行同步的频率</p><p>　　vm_enabled：是否开启虚拟内存支持</p><p>　　vm_swap_file：设置虚拟内存的交换文件的路径</p><p>　　vm_max_momery：设置开启虚拟内存后，redis将使用的最大物理内存的大小，默认为0</p><p>　　vm_page_size：设置虚拟内存页的大小</p><p>　　vm_pages：设置交换文件的总的page数量</p><p>　　vm_max_thrrads：设置vm IO同时使用的线程数量</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 缓存 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成电脑的SSH key</title>
      <link href="/2020/01/04/ssh/"/>
      <url>/2020/01/04/ssh/</url>
      
        <content type="html"><![CDATA[<h1 id="电脑SSH公钥"><a href="#电脑SSH公钥" class="headerlink" title="电脑SSH公钥"></a>电脑SSH公钥</h1><p>打开git命令窗口（git  Bash Here）</p><p>输入：（</p><p>ssh-keygen -t rsa -C “邮箱”<br>）</p><p>生成电脑的.ssh文件</p><p>默认在C:\Users\Administrator.ssh</p><p>之前在阿里云上需要SSH公钥，然后用到的</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SSH key </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH key </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gnomeshgh文案✨</title>
      <link href="/2020/01/04/Gnomeshgh%E6%96%87%E6%A1%88%E2%9C%A8/"/>
      <url>/2020/01/04/Gnomeshgh%E6%96%87%E6%A1%88%E2%9C%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Gnomeshgh文案✨"><a href="#Gnomeshgh文案✨" class="headerlink" title="Gnomeshgh文案✨"></a>Gnomeshgh文案✨</h1><p>*<em>Gnomeshgh✨妙语连珠是猎物，支支吾吾是喜欢。<br>*</em> 我的第一个人网站：<a href="http://www.wenan.cloud" target="_blank" rel="noopener" title="Gnomeshgh文案✨">Gnomeshgh文案✨</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Gnomeshgh文案✨ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gnomeshgh文案✨ </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
